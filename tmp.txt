<script setup lang="ts">

import router from '../../router';
import { useCardStore } from '../../stores/card';
import { Ref, ref } from 'vue'
import type { Card, Theme } from '../../model/interface';
import { useThemeStore } from '../../stores/theme';
import { useRevisionStore } from '../../stores/revision';
import { useGameStore } from '../../stores/game';
import CardCPS from '../../components/Card.vue'

const storeTheme = useThemeStore()
const storeCard = useCardStore()
const revisionStore = useRevisionStore()
const props = defineProps({
    id: { type: Number, required: true }
})

/**Vérifie si l'initialisation c'est bien déroulé */

/*
Déroulement du niveau
O Récupération des cartes du jour et des niveaux
    O Si la date de la dernière révision n'est pas egale a la date du jour 
        / (Ajouter le bon nombre maj le json) Ajouter X cartes et affecter la date du jour
O Retourner les cartes du dernier niveau du jour
    O Si vide passer au niveau suivant (l'ordre est décroissant)
- Répondre à chaque carte 
    - Correct = Passer la carte au niveau suivant
    - Faux = Passer la carte au niveau 1
- Vérifier si le niveau ne contient plus de carte
- Si tout les niveaux sont vide plus de revision pour aujourd'hui
*/

//___________________________________________________________

//Vérifier s'il y a des cartes a réviser

//Redirection vers la page précédente
if (!storeTheme.contain(props.id)) {
    console.log("Erreur lors du chargement du thème")
    router.go(-1)
}

/**Theme courant */
const theme: Theme = storeTheme.getTheme(props.id) || {} as Theme;

/**Espacement des niveaux en fonction des jours*/
const daySpace = {
    1: { start: 1, gap: 1 },
    2: { start: 1, gap: 2 },
    3: { start: 2, gap: 4 },
    4: [4, 13, 20, 29, 36, 45, 52, 61],
    5: [12, 28, 44, 60],
    6: [24, 59],
    7: [56],
}

/**Niveaux du jour à réviser */
let todayLevel: number[] = getTodayLevel();
let currentLevel: number = todayLevel.length > 0 ? (todayLevel.pop() ?? 0) : 0;
let cardsLevel: number[] = []

//Utile ? 
if (currentLevel == 0) {
    console.log("Il n'y a pas de carte à réviser aujourd'hui")
    router.go(-1)
}

//Création de la pile de révision
if (theme.first_revision == "")
    theme.cards_revision[0] = theme.cards

if (getDayDiffWithToday(theme.last_revision) != 0) {
    // Fonctionne
    // gameStore.addRevisionCard(props.id)
}

nextLevel()
console.log(storeTheme.getThemes());

let card:Ref<Card> = ref(storeCard.getCard(cardsLevel.pop() ??0) ?? {} as Card); 
console.log(card.value);


// next()

// let containCard: boolean = false

// todayLevel.forEach(levelId => {
//     containCard ||= gameStore.getCard(props.id, levelId).length > 0
// })

// if (containCard) {
//     cardsLevel = gameStore.getCard(props.id, currentLevel)
// }

function endGame() {
    console.log("End game")
    router.go(-1)
}

/**Passe carte du niveau suivant s'il en reste. Sinon endGame */
function nextLevel() {

    //Tant que le niveau est vide et qu'il reste des niveaux
    let isEndGame: boolean = false;
    let isEmpty = true

    //Tant que le niveau courant est vide et qu'il reste des cartes
    do {

        console.log(todayLevel);

        //Récupération du dernier niveau
        currentLevel = todayLevel.pop() ?? 0

        //Si le niveau est à 0, c'est que la liste est vide, fin de la partie
        if (currentLevel == 0)
            isEndGame = true

        else {

            let cards = revisionStore.getCard(props.id, currentLevel)
            isEmpty = cards.length <= 0

            //Si le niveau courant à des cartes
            if (!isEmpty) {
                cardsLevel = revisionStore.getCard(props.id, currentLevel)
            }
        }

        console.log(cardsLevel);

    } while (isEmpty && todayLevel.length > 0);

    if(isEndGame)
        endGame()
}

// function answer(cardId:number, isCorrect:boolean){
//     console.log({cardId});
//     console.log(storeTheme.getThemes());
//     gameStore.cardAnswer(props.id, cardId, isCorrect )
//     next()
// }

// function next() {

//     console.log({cardsLevel});
    
//     if (cardsLevel.length > 0) {
//         card.value = storeCard.getCard(cardsLevel.pop() ??0) ?? {} as Card
//         console.log(card.value);
//     } else {
//         nextLevel()
//     }

//     showVerso.value = false
// }

// //_________________________________________________

/**Retourne les niveau à réviser du jour */
function getTodayLevel() {

    /**Nombre de jour depuis la première révision */
    const days = getDayDiffWithToday(theme.first_revision)

    /**Niveau à réviser */
    const revisionLevels: number[] = []

    //Bouclé sur le nombre de niveau max autorisé par le thème
    for (let i = 1; i <= theme.max_level; i++) {

        //Pattern irrégulier
        if (i > 3) {
            if (daySpace[i].includes(days))
                revisionLevels.push(i)
        }

        //Pattern régulier
        else {
            if ((days - daySpace[i].start) % daySpace[i].gap == 0)
                revisionLevels.push(i)
        }
    }

    return revisionLevels
}

/**Retourne le nombre de jour entre le début des révisions et la date du jour */
function getDayDiffWithToday(date: string) {
    const startDate = Date.parse(date)
    const today = Date.parse(new Date().toString())

    const diffTime = Math.abs(today - startDate);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

// let showVerso = ref(false) 

// /**Montre le verso de la carte */
// function showAnswer() {
//     showVerso.value = !showVerso.value
//     console.log("showVerso : ", showVerso.value);
// }


</script>

<template>
    <!-- <CardCPS :show-verso="showVerso" :edit="false" :id-theme="id" :id="card.id" :recto="card.recto"
            :verso="card.verso" />

    <div class="btns">

        <div v-show="showVerso" class="btns-answer">
            <button v-on:click="answer(card.id, false)">Faux</button>
            <button v-on:click="answer(card.id, true)">Juste</button>
        </div>

        <button v-show="!showVerso" v-on:click="showAnswer()">Afficher la carte</button>
    </div> -->
</template>

<style scoped lang="scss"></style>